// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proto

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Timestamp
//  - TraceId: 长度大于10位的随机字符串不能重复,推荐使用UUID
//  - Sig: 签名信息 Sha256Hex(sigKey + timestamp + nonce)
type ReqHeader struct {
  Timestamp int64 `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  TraceId string `thrift:"traceId,2" db:"traceId" json:"traceId"`
  Sig string `thrift:"sig,3" db:"sig" json:"sig"`
}

func NewReqHeader() *ReqHeader {
  return &ReqHeader{}
}


func (p *ReqHeader) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *ReqHeader) GetTraceId() string {
  return p.TraceId
}

func (p *ReqHeader) GetSig() string {
  return p.Sig
}
func (p *ReqHeader) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqHeader)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ReqHeader)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *ReqHeader)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sig = v
}
  return nil
}

func (p *ReqHeader) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReqHeader"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqHeader) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *ReqHeader) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:traceId: ", p), err) }
  return err
}

func (p *ReqHeader) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sig", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sig: ", p), err) }
  if err := oprot.WriteString(string(p.Sig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sig (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sig: ", p), err) }
  return err
}

func (p *ReqHeader) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqHeader(%+v)", *p)
}

type ResqHeader struct {
}

func NewResqHeader() *ResqHeader {
  return &ResqHeader{}
}

func (p *ResqHeader) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResqHeader) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResqHeader"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResqHeader) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResqHeader(%+v)", *p)
}

// Attributes:
//  - Header
//  - GroupName: 当前支持两个(viodoc:公开文件组可以通过nginx访问文件, private:私有文件组,上传后必须通过下载接口才可访问)
//  - FileContent: 文件内容
//  - FileExtName: 文件扩展名如png,jpg等文件的扩展名
//  - MasterFilename: 主文件名,如果为slave上传时需要指定
//  - SlavePrefixName: 从文件前缀名如: _100x100,如果为slave上传时需要指定
//  - TTL: time to live 存活时间（天）
//  - ResizeWidth: 压缩后宽度,只有png或jpg后缀的图片才会被压缩,并且resizeWidth和resizeHeight二者中有一个大于0才会被压缩
//  - ResizeHeight: 压缩后高度,只有png或jpg后缀的图片才会被压缩,并且resizeWidth和resizeHeight二者中有一个大于0才会被压缩
type UploadReq struct {
  Header *ReqHeader `thrift:"header,1" db:"header" json:"header"`
  GroupName string `thrift:"groupName,2" db:"groupName" json:"groupName"`
  FileContent []byte `thrift:"fileContent,3" db:"fileContent" json:"fileContent"`
  FileExtName string `thrift:"fileExtName,4" db:"fileExtName" json:"fileExtName"`
  MasterFilename string `thrift:"masterFilename,5" db:"masterFilename" json:"masterFilename"`
  SlavePrefixName string `thrift:"slavePrefixName,6" db:"slavePrefixName" json:"slavePrefixName"`
  TTL int32 `thrift:"ttl,7" db:"ttl" json:"ttl"`
  ResizeWidth int32 `thrift:"resizeWidth,8" db:"resizeWidth" json:"resizeWidth"`
  ResizeHeight int32 `thrift:"resizeHeight,9" db:"resizeHeight" json:"resizeHeight"`
}

func NewUploadReq() *UploadReq {
  return &UploadReq{
TTL: -1,
}
}

var UploadReq_Header_DEFAULT *ReqHeader
func (p *UploadReq) GetHeader() *ReqHeader {
  if !p.IsSetHeader() {
    return UploadReq_Header_DEFAULT
  }
return p.Header
}

func (p *UploadReq) GetGroupName() string {
  return p.GroupName
}

func (p *UploadReq) GetFileContent() []byte {
  return p.FileContent
}

func (p *UploadReq) GetFileExtName() string {
  return p.FileExtName
}

func (p *UploadReq) GetMasterFilename() string {
  return p.MasterFilename
}

func (p *UploadReq) GetSlavePrefixName() string {
  return p.SlavePrefixName
}

func (p *UploadReq) GetTTL() int32 {
  return p.TTL
}

func (p *UploadReq) GetResizeWidth() int32 {
  return p.ResizeWidth
}

func (p *UploadReq) GetResizeHeight() int32 {
  return p.ResizeHeight
}
func (p *UploadReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UploadReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UploadReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UploadReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *UploadReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileContent = v
}
  return nil
}

func (p *UploadReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FileExtName = v
}
  return nil
}

func (p *UploadReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MasterFilename = v
}
  return nil
}

func (p *UploadReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SlavePrefixName = v
}
  return nil
}

func (p *UploadReq)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TTL = v
}
  return nil
}

func (p *UploadReq)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ResizeWidth = v
}
  return nil
}

func (p *UploadReq)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ResizeHeight = v
}
  return nil
}

func (p *UploadReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UploadReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UploadReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err) }
  return err
}

func (p *UploadReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileContent", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileContent: ", p), err) }
  if err := oprot.WriteBinary(p.FileContent); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileContent (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileContent: ", p), err) }
  return err
}

func (p *UploadReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileExtName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fileExtName: ", p), err) }
  if err := oprot.WriteString(string(p.FileExtName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileExtName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fileExtName: ", p), err) }
  return err
}

func (p *UploadReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("masterFilename", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:masterFilename: ", p), err) }
  if err := oprot.WriteString(string(p.MasterFilename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.masterFilename (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:masterFilename: ", p), err) }
  return err
}

func (p *UploadReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("slavePrefixName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:slavePrefixName: ", p), err) }
  if err := oprot.WriteString(string(p.SlavePrefixName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.slavePrefixName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:slavePrefixName: ", p), err) }
  return err
}

func (p *UploadReq) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ttl", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ttl: ", p), err) }
  if err := oprot.WriteI32(int32(p.TTL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttl (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ttl: ", p), err) }
  return err
}

func (p *UploadReq) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resizeWidth", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:resizeWidth: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResizeWidth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resizeWidth (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:resizeWidth: ", p), err) }
  return err
}

func (p *UploadReq) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resizeHeight", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:resizeHeight: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResizeHeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resizeHeight (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:resizeHeight: ", p), err) }
  return err
}

func (p *UploadReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UploadReq(%+v)", *p)
}

// Attributes:
//  - Header
//  - GroupName
//  - RemoteFilename
type UploadResp struct {
  Header *ResqHeader `thrift:"header,1" db:"header" json:"header"`
  GroupName string `thrift:"groupName,2" db:"groupName" json:"groupName"`
  RemoteFilename string `thrift:"remoteFilename,3" db:"remoteFilename" json:"remoteFilename"`
}

func NewUploadResp() *UploadResp {
  return &UploadResp{}
}

var UploadResp_Header_DEFAULT *ResqHeader
func (p *UploadResp) GetHeader() *ResqHeader {
  if !p.IsSetHeader() {
    return UploadResp_Header_DEFAULT
  }
return p.Header
}

func (p *UploadResp) GetGroupName() string {
  return p.GroupName
}

func (p *UploadResp) GetRemoteFilename() string {
  return p.RemoteFilename
}
func (p *UploadResp) IsSetHeader() bool {
  return p.Header != nil
}

func (p *UploadResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UploadResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ResqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *UploadResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *UploadResp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RemoteFilename = v
}
  return nil
}

func (p *UploadResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UploadResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *UploadResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err) }
  return err
}

func (p *UploadResp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remoteFilename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remoteFilename: ", p), err) }
  if err := oprot.WriteString(string(p.RemoteFilename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remoteFilename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remoteFilename: ", p), err) }
  return err
}

func (p *UploadResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UploadResp(%+v)", *p)
}

// Attributes:
//  - Header
//  - GroupName
//  - RemoteFilename
type DownloadReq struct {
  Header *ReqHeader `thrift:"header,1" db:"header" json:"header"`
  GroupName string `thrift:"groupName,2" db:"groupName" json:"groupName"`
  RemoteFilename string `thrift:"remoteFilename,3" db:"remoteFilename" json:"remoteFilename"`
}

func NewDownloadReq() *DownloadReq {
  return &DownloadReq{}
}

var DownloadReq_Header_DEFAULT *ReqHeader
func (p *DownloadReq) GetHeader() *ReqHeader {
  if !p.IsSetHeader() {
    return DownloadReq_Header_DEFAULT
  }
return p.Header
}

func (p *DownloadReq) GetGroupName() string {
  return p.GroupName
}

func (p *DownloadReq) GetRemoteFilename() string {
  return p.RemoteFilename
}
func (p *DownloadReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *DownloadReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DownloadReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *DownloadReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *DownloadReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RemoteFilename = v
}
  return nil
}

func (p *DownloadReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DownloadReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DownloadReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *DownloadReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err) }
  return err
}

func (p *DownloadReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remoteFilename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remoteFilename: ", p), err) }
  if err := oprot.WriteString(string(p.RemoteFilename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remoteFilename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remoteFilename: ", p), err) }
  return err
}

func (p *DownloadReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DownloadReq(%+v)", *p)
}

// Attributes:
//  - Header
//  - FileContent
//  - DownloadSize
type DownloadResp struct {
  Header *ResqHeader `thrift:"header,1" db:"header" json:"header"`
  FileContent []byte `thrift:"fileContent,2" db:"fileContent" json:"fileContent"`
  DownloadSize int64 `thrift:"downloadSize,3" db:"downloadSize" json:"downloadSize"`
}

func NewDownloadResp() *DownloadResp {
  return &DownloadResp{}
}

var DownloadResp_Header_DEFAULT *ResqHeader
func (p *DownloadResp) GetHeader() *ResqHeader {
  if !p.IsSetHeader() {
    return DownloadResp_Header_DEFAULT
  }
return p.Header
}

func (p *DownloadResp) GetFileContent() []byte {
  return p.FileContent
}

func (p *DownloadResp) GetDownloadSize() int64 {
  return p.DownloadSize
}
func (p *DownloadResp) IsSetHeader() bool {
  return p.Header != nil
}

func (p *DownloadResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DownloadResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ResqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *DownloadResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileContent = v
}
  return nil
}

func (p *DownloadResp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DownloadSize = v
}
  return nil
}

func (p *DownloadResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DownloadResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DownloadResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *DownloadResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileContent", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileContent: ", p), err) }
  if err := oprot.WriteBinary(p.FileContent); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileContent (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileContent: ", p), err) }
  return err
}

func (p *DownloadResp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downloadSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:downloadSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.DownloadSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.downloadSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:downloadSize: ", p), err) }
  return err
}

func (p *DownloadResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DownloadResp(%+v)", *p)
}

// Attributes:
//  - Header
//  - GroupName
//  - RemoteFilename
type DeleteReq struct {
  Header *ReqHeader `thrift:"header,1" db:"header" json:"header"`
  GroupName string `thrift:"groupName,2" db:"groupName" json:"groupName"`
  RemoteFilename string `thrift:"remoteFilename,3" db:"remoteFilename" json:"remoteFilename"`
}

func NewDeleteReq() *DeleteReq {
  return &DeleteReq{}
}

var DeleteReq_Header_DEFAULT *ReqHeader
func (p *DeleteReq) GetHeader() *ReqHeader {
  if !p.IsSetHeader() {
    return DeleteReq_Header_DEFAULT
  }
return p.Header
}

func (p *DeleteReq) GetGroupName() string {
  return p.GroupName
}

func (p *DeleteReq) GetRemoteFilename() string {
  return p.RemoteFilename
}
func (p *DeleteReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *DeleteReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *DeleteReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *DeleteReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RemoteFilename = v
}
  return nil
}

func (p *DeleteReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *DeleteReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err) }
  return err
}

func (p *DeleteReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remoteFilename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remoteFilename: ", p), err) }
  if err := oprot.WriteString(string(p.RemoteFilename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remoteFilename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remoteFilename: ", p), err) }
  return err
}

func (p *DeleteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteReq(%+v)", *p)
}

// Attributes:
//  - Header
type DeleteResp struct {
  Header *ResqHeader `thrift:"header,1" db:"header" json:"header"`
}

func NewDeleteResp() *DeleteResp {
  return &DeleteResp{}
}

var DeleteResp_Header_DEFAULT *ResqHeader
func (p *DeleteResp) GetHeader() *ResqHeader {
  if !p.IsSetHeader() {
    return DeleteResp_Header_DEFAULT
  }
return p.Header
}
func (p *DeleteResp) IsSetHeader() bool {
  return p.Header != nil
}

func (p *DeleteResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ResqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *DeleteResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *DeleteResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteResp(%+v)", *p)
}

type FdfsSrv interface {
  // Parameters:
  //  - Req
  Upload(req *UploadReq) (r *UploadResp, err error)
  // Parameters:
  //  - Req
  Download(req *DownloadReq) (r *DownloadResp, err error)
  // Parameters:
  //  - Req
  DeleteFile(req *DeleteReq) (r *DeleteResp, err error)
}

type FdfsSrvClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewFdfsSrvClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FdfsSrvClient {
  return &FdfsSrvClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewFdfsSrvClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FdfsSrvClient {
  return &FdfsSrvClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *FdfsSrvClient) Upload(req *UploadReq) (r *UploadResp, err error) {
  if err = p.sendUpload(req); err != nil { return }
  return p.recvUpload()
}

func (p *FdfsSrvClient) sendUpload(req *UploadReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("upload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FdfsSrvUploadArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FdfsSrvClient) recvUpload() (value *UploadResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "upload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upload failed: invalid message type")
    return
  }
  result := FdfsSrvUploadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *FdfsSrvClient) Download(req *DownloadReq) (r *DownloadResp, err error) {
  if err = p.sendDownload(req); err != nil { return }
  return p.recvDownload()
}

func (p *FdfsSrvClient) sendDownload(req *DownloadReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("download", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FdfsSrvDownloadArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FdfsSrvClient) recvDownload() (value *DownloadResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "download" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "download failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "download failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "download failed: invalid message type")
    return
  }
  result := FdfsSrvDownloadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *FdfsSrvClient) DeleteFile(req *DeleteReq) (r *DeleteResp, err error) {
  if err = p.sendDeleteFile(req); err != nil { return }
  return p.recvDeleteFile()
}

func (p *FdfsSrvClient) sendDeleteFile(req *DeleteReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteFile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := FdfsSrvDeleteFileArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *FdfsSrvClient) recvDeleteFile() (value *DeleteResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteFile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteFile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteFile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteFile failed: invalid message type")
    return
  }
  result := FdfsSrvDeleteFileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type FdfsSrvProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FdfsSrv
}

func (p *FdfsSrvProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FdfsSrvProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FdfsSrvProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFdfsSrvProcessor(handler FdfsSrv) *FdfsSrvProcessor {

  self6 := &FdfsSrvProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["upload"] = &fdfsSrvProcessorUpload{handler:handler}
  self6.processorMap["download"] = &fdfsSrvProcessorDownload{handler:handler}
  self6.processorMap["deleteFile"] = &fdfsSrvProcessorDeleteFile{handler:handler}
return self6
}

func (p *FdfsSrvProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type fdfsSrvProcessorUpload struct {
  handler FdfsSrv
}

func (p *fdfsSrvProcessorUpload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FdfsSrvUploadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("upload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FdfsSrvUploadResult{}
var retval *UploadResp
  var err2 error
  if retval, err2 = p.handler.Upload(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upload: " + err2.Error())
    oprot.WriteMessageBegin("upload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("upload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fdfsSrvProcessorDownload struct {
  handler FdfsSrv
}

func (p *fdfsSrvProcessorDownload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FdfsSrvDownloadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("download", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FdfsSrvDownloadResult{}
var retval *DownloadResp
  var err2 error
  if retval, err2 = p.handler.Download(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing download: " + err2.Error())
    oprot.WriteMessageBegin("download", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("download", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fdfsSrvProcessorDeleteFile struct {
  handler FdfsSrv
}

func (p *fdfsSrvProcessorDeleteFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FdfsSrvDeleteFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FdfsSrvDeleteFileResult{}
var retval *DeleteResp
  var err2 error
  if retval, err2 = p.handler.DeleteFile(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteFile: " + err2.Error())
    oprot.WriteMessageBegin("deleteFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("deleteFile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type FdfsSrvUploadArgs struct {
  Req *UploadReq `thrift:"req,1" db:"req" json:"req"`
}

func NewFdfsSrvUploadArgs() *FdfsSrvUploadArgs {
  return &FdfsSrvUploadArgs{}
}

var FdfsSrvUploadArgs_Req_DEFAULT *UploadReq
func (p *FdfsSrvUploadArgs) GetReq() *UploadReq {
  if !p.IsSetReq() {
    return FdfsSrvUploadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *FdfsSrvUploadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *FdfsSrvUploadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvUploadArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &UploadReq{
  TTL: -1,
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *FdfsSrvUploadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *FdfsSrvUploadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvUploadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FdfsSrvUploadResult struct {
  Success *UploadResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFdfsSrvUploadResult() *FdfsSrvUploadResult {
  return &FdfsSrvUploadResult{}
}

var FdfsSrvUploadResult_Success_DEFAULT *UploadResp
func (p *FdfsSrvUploadResult) GetSuccess() *UploadResp {
  if !p.IsSetSuccess() {
    return FdfsSrvUploadResult_Success_DEFAULT
  }
return p.Success
}
func (p *FdfsSrvUploadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FdfsSrvUploadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvUploadResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UploadResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FdfsSrvUploadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FdfsSrvUploadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvUploadResult(%+v)", *p)
}

// Attributes:
//  - Req
type FdfsSrvDownloadArgs struct {
  Req *DownloadReq `thrift:"req,1" db:"req" json:"req"`
}

func NewFdfsSrvDownloadArgs() *FdfsSrvDownloadArgs {
  return &FdfsSrvDownloadArgs{}
}

var FdfsSrvDownloadArgs_Req_DEFAULT *DownloadReq
func (p *FdfsSrvDownloadArgs) GetReq() *DownloadReq {
  if !p.IsSetReq() {
    return FdfsSrvDownloadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *FdfsSrvDownloadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *FdfsSrvDownloadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvDownloadArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &DownloadReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *FdfsSrvDownloadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("download_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvDownloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *FdfsSrvDownloadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvDownloadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FdfsSrvDownloadResult struct {
  Success *DownloadResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFdfsSrvDownloadResult() *FdfsSrvDownloadResult {
  return &FdfsSrvDownloadResult{}
}

var FdfsSrvDownloadResult_Success_DEFAULT *DownloadResp
func (p *FdfsSrvDownloadResult) GetSuccess() *DownloadResp {
  if !p.IsSetSuccess() {
    return FdfsSrvDownloadResult_Success_DEFAULT
  }
return p.Success
}
func (p *FdfsSrvDownloadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FdfsSrvDownloadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvDownloadResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DownloadResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FdfsSrvDownloadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("download_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvDownloadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FdfsSrvDownloadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvDownloadResult(%+v)", *p)
}

// Attributes:
//  - Req
type FdfsSrvDeleteFileArgs struct {
  Req *DeleteReq `thrift:"req,1" db:"req" json:"req"`
}

func NewFdfsSrvDeleteFileArgs() *FdfsSrvDeleteFileArgs {
  return &FdfsSrvDeleteFileArgs{}
}

var FdfsSrvDeleteFileArgs_Req_DEFAULT *DeleteReq
func (p *FdfsSrvDeleteFileArgs) GetReq() *DeleteReq {
  if !p.IsSetReq() {
    return FdfsSrvDeleteFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *FdfsSrvDeleteFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *FdfsSrvDeleteFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvDeleteFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &DeleteReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *FdfsSrvDeleteFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvDeleteFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *FdfsSrvDeleteFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvDeleteFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FdfsSrvDeleteFileResult struct {
  Success *DeleteResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFdfsSrvDeleteFileResult() *FdfsSrvDeleteFileResult {
  return &FdfsSrvDeleteFileResult{}
}

var FdfsSrvDeleteFileResult_Success_DEFAULT *DeleteResp
func (p *FdfsSrvDeleteFileResult) GetSuccess() *DeleteResp {
  if !p.IsSetSuccess() {
    return FdfsSrvDeleteFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *FdfsSrvDeleteFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FdfsSrvDeleteFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FdfsSrvDeleteFileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DeleteResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FdfsSrvDeleteFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FdfsSrvDeleteFileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FdfsSrvDeleteFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FdfsSrvDeleteFileResult(%+v)", *p)
}


