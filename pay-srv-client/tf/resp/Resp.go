// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package resp

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ReturnCode: 字段名:返回状态码
// 描述:此字段是通信标识，非交易标识，交易是否成功需要查看result_code来判断SUCCESS/FAIL
// 示例:SUCCESS
// 必须:是
//  - ReturnMsg: 字段名:返回信息
// 描述:返回信息，如非空，为错误原因
// 示例:签名失败
// 必须:否
//  - Appid: 字段名:应用APPID
// 描述:调用接口提交的应用ID
// 示例:wx8888888888888888
// 必须:是
//  - MchID: 字段名:商户号
// 描述:调用接口提交的商户号
// 示例:1900000109
// 必须:是
//  - DeviceInfo: 字段名:设备号
// 描述:调用接口提交的终端设备号
// 示例:013467007045764
// 必须:否
//  - NonceStr: 字段名:随机字符串
// 描述:微信返回的随机字符串
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
//  - Sign: 字段名:签名
// 描述:微信返回的签名，详见签名算法
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
//  - ResultCode: 字段名:业务结果
// 描述:SUCCESS/FAIL
// 示例:SUCCESS
// 必须:是
//  - ErrCode: 字段名:错误代码
// 描述:详细参见腾讯官方错误列表
// 示例:SYSTEMERROR
// 必须:否
//  - ErrCodeDes: 字段名:错误代码描述
// 描述:错误返回的信息描述
// 示例:	系统错误
// 必须:否
//  - TradeType: 字段名:交易类型
// 描述:调用接口提交的交易类型，取值如下：JSAPI，NATIVE，APP，详细说明见参数规定
// 示例:JSAPI
// 必须:是
//  - PrepayID: 字段名:预支付交易会话标识
// 描述:微信生成的预支付回话标识，用于后续接口调用中使用，该值有效期为2小时
// 示例:wx201410272009395522657a690389285100
// 必须:是
type GetPayInfoResp struct {
  ReturnCode string `thrift:"return_code,1" db:"return_code" json:"return_code"`
  ReturnMsg string `thrift:"return_msg,2" db:"return_msg" json:"return_msg"`
  Appid string `thrift:"appid,3" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,4" db:"mch_id" json:"mch_id"`
  DeviceInfo string `thrift:"device_info,5" db:"device_info" json:"device_info"`
  NonceStr string `thrift:"nonce_str,6" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,7" db:"sign" json:"sign"`
  ResultCode string `thrift:"result_code,8" db:"result_code" json:"result_code"`
  ErrCode string `thrift:"err_code,9" db:"err_code" json:"err_code"`
  ErrCodeDes string `thrift:"err_code_des,10" db:"err_code_des" json:"err_code_des"`
  TradeType string `thrift:"trade_type,11" db:"trade_type" json:"trade_type"`
  PrepayID string `thrift:"prepay_id,12" db:"prepay_id" json:"prepay_id"`
}

func NewGetPayInfoResp() *GetPayInfoResp {
  return &GetPayInfoResp{}
}


func (p *GetPayInfoResp) GetReturnCode() string {
  return p.ReturnCode
}

func (p *GetPayInfoResp) GetReturnMsg() string {
  return p.ReturnMsg
}

func (p *GetPayInfoResp) GetAppid() string {
  return p.Appid
}

func (p *GetPayInfoResp) GetMchID() string {
  return p.MchID
}

func (p *GetPayInfoResp) GetDeviceInfo() string {
  return p.DeviceInfo
}

func (p *GetPayInfoResp) GetNonceStr() string {
  return p.NonceStr
}

func (p *GetPayInfoResp) GetSign() string {
  return p.Sign
}

func (p *GetPayInfoResp) GetResultCode() string {
  return p.ResultCode
}

func (p *GetPayInfoResp) GetErrCode() string {
  return p.ErrCode
}

func (p *GetPayInfoResp) GetErrCodeDes() string {
  return p.ErrCodeDes
}

func (p *GetPayInfoResp) GetTradeType() string {
  return p.TradeType
}

func (p *GetPayInfoResp) GetPrepayID() string {
  return p.PrepayID
}
func (p *GetPayInfoResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPayInfoResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnCode = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReturnMsg = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DeviceInfo = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ResultCode = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ErrCodeDes = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.TradeType = v
}
  return nil
}

func (p *GetPayInfoResp)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PrepayID = v
}
  return nil
}

func (p *GetPayInfoResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPayInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPayInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:return_code: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:return_code: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:return_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:return_msg: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mch_id: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_info", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:device_info: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_info (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:device_info: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonce_str: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sign: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result_code", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:result_code: ", p), err) }
  if err := oprot.WriteString(string(p.ResultCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result_code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:result_code: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:err_code: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:err_code: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code_des", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:err_code_des: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCodeDes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code_des (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:err_code_des: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_type", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:trade_type: ", p), err) }
  if err := oprot.WriteString(string(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_type (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:trade_type: ", p), err) }
  return err
}

func (p *GetPayInfoResp) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prepay_id", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:prepay_id: ", p), err) }
  if err := oprot.WriteString(string(p.PrepayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prepay_id (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:prepay_id: ", p), err) }
  return err
}

func (p *GetPayInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPayInfoResp(%+v)", *p)
}

// Attributes:
//  - ReturnCode: 字段名:返回状态码
// 描述:SUCCESS
// 示例:SUCCESS/FAIL,此字段是通信标识，非交易标识，交易是否成功需要查看trade_state来判断
// 必须:是
//  - ReturnMsg: 字段名:返回信息
// 描述:   返回信息，如非空，为错误原因
//         签名失败
//         参数格式校验错误
// 示例:签名失败
// 必须:否
//  - Appid: 字段名:应用APPID
// 描述:微信开放平台审核通过的应用APPID
// 示例:wxd678efh567hg6787
// 必须:是
//  - MchID: 字段名:商户号
// 描述:1230000109
// 示例:微信支付分配的商户号
// 必须:是
//  - NonceStr: 字段名:随机字符串
// 描述:随机字符串，不长于32位。推荐随机数生成算法
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
//  - Sign: 字段名:签名
// 描述:签名，详见签名生成算法
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
//  - ResultCode: 字段名:业务结果
// 描述:SUCCESS/FAIL
// 示例:SUCCESS
// 必须:是
//  - ErrCode: 字段名:错误代码
// 描述:错误码
// 示例:SYSTEMERROR
// 必须:否
//  - ErrCodeDes: 字段名:错误代码描述
// 描述:	结果信息描述
// 示例:	系统错误
// 必须:否
//  - DeviceInfo: 字段名:设备号
// 描述:微信支付分配的终端设备号
// 示例:013467007045764
// 必须:否
//  - Openid: 字段名:用户标识
// 描述:用户在商户appid下的唯一标识
// 示例:oUpF8uMuAJO_M2pxb1Q9zNjWeS6o
// 必须:是
//  - IsSubscribe: 字段名:是否关注公众账号
// 描述:用户是否关注公众账号，Y-关注，N-未关注，仅在公众账号类型支付有效
// 示例:Y
// 必须:否
//  - TradeType: 字段名:交易类型
// 描述:调用接口提交的交易类型
// 示例:APP
// 必须:是
//  - TradeState: 字段名:交易状态
// 描述:SUCCESS—支付成功
//     REFUND—转入退款
//     NOTPAY—未支付
//     CLOSED—已关闭
//     REVOKED—已撤销（刷卡支付）
//     USERPAYING--用户支付中
//     PAYERROR--支付失败(其他原因，如银行返回失败)
// 示例:SUCCESS
// 必须:是
//  - BankType: 字段名:付款银行
// 描述:银行类型，采用字符串类型的银行标识
// 示例:CMC
// 必须:是
//  - TotalFee: 字段名:总金额
// 描述:订单总金额，单位为分
// 示例:100
// 必须:是
//  - FeeType: 字段名:货币种类
// 描述:货币类型，符合ISO 4217标准的三位字母代码，默认人民币：CNY，其他值列表详见货币类型
// 示例:CNY
// 必须:否
//  - CashFee: 字段名:现金支付金额
// 描述:现金支付金额订单现金支付金额，详见支付金额
// 示例:100
// 必须:是
//  - CashFeeType: 字段名:现金支付货币类型
// 描述:货币类型，符合ISO 4217标准的三位字母代码，默认人民币：CNY，其他值列表详见货币类型
// 示例:CNY
// 必须:否
//  - SettlementTotalFee: 字段名:应结订单金额
// 描述:当订单使用了免充值型优惠券后返回该参数，应结订单金额=订单金额-免充值优惠券金额
// 示例:100
// 必须:否
//  - CouponFee: 字段名:代金券金额
// 描述:“代金券或立减优惠”金额<=订单总金额，订单总金额-“代金券或立减优惠”金额=现金支付金额，详见支付金额
// 示例:100
// 必须:否
//  - CouponCount: 字段名:代金券使用数量
// 描述:代金券或立减优惠使用数量
// 示例:1
// 必须:否
//  - CouponIDN: 字段名:代金券ID(coupon_id_$n)
// 描述:代金券或立减优惠ID, $n为下标，从0开始编号
// 示例:10000
// 必须:否
//  - CouponTypeN: 字段名:代金券类型(coupon_type_$n)
// 描述:CASH--充值代金券
//        NO_CASH---非充值优惠券
//        开通免充值券功能，并且订单使用了优惠券后有返回（取值：CASH、NO_CASH）。$n为下标,从0开始编号，举例：coupon_type_$0
// 示例:CASH
// 必须:否
//  - CouponFeeN: 字段名:单个代金券支付金额(coupon_fee_$n)
// 描述:单个代金券或立减优惠支付金额, $n为下标，从0开始编号
// 示例:100
// 必须:否
//  - TransactionID: 字段名:微信支付订单号
// 描述:微信支付订单号
// 示例:1009660380201506130728806387
// 必须:是
//  - OutTradeNo: 字段名:商户订单号
// 描述:商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一
// 示例:20150806125346
// 必须:是
//  - Attach: 字段名:附加数据
// 描述:附加数据，原样返回
// 示例:深圳分店
// 必须:否
//  - TimeEnd: 字段名:支付完成时间
// 描述:订单支付时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见时间规则
// 示例:20141030133525
// 必须:是
//  - TradeStateDesc: 字段名:交易状态描述
// 描述:对当前查询订单状态的描述和下一步操作的指引
// 示例:支付失败，请重新下单支付
// 必须:是
type OrderQueryResp struct {
  ReturnCode string `thrift:"return_code,1" db:"return_code" json:"return_code"`
  ReturnMsg string `thrift:"return_msg,2" db:"return_msg" json:"return_msg"`
  Appid string `thrift:"appid,3" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,4" db:"mch_id" json:"mch_id"`
  NonceStr string `thrift:"nonce_str,5" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
  ResultCode string `thrift:"result_code,7" db:"result_code" json:"result_code"`
  ErrCode string `thrift:"err_code,8" db:"err_code" json:"err_code"`
  ErrCodeDes string `thrift:"err_code_des,9" db:"err_code_des" json:"err_code_des"`
  DeviceInfo string `thrift:"device_info,10" db:"device_info" json:"device_info"`
  Openid string `thrift:"openid,11" db:"openid" json:"openid"`
  IsSubscribe string `thrift:"is_subscribe,12" db:"is_subscribe" json:"is_subscribe"`
  TradeType string `thrift:"trade_type,13" db:"trade_type" json:"trade_type"`
  TradeState string `thrift:"trade_state,14" db:"trade_state" json:"trade_state"`
  BankType string `thrift:"bank_type,15" db:"bank_type" json:"bank_type"`
  TotalFee int64 `thrift:"total_fee,16" db:"total_fee" json:"total_fee"`
  FeeType string `thrift:"fee_type,17" db:"fee_type" json:"fee_type"`
  CashFee int64 `thrift:"cash_fee,18" db:"cash_fee" json:"cash_fee"`
  CashFeeType string `thrift:"cash_fee_type,19" db:"cash_fee_type" json:"cash_fee_type"`
  SettlementTotalFee int64 `thrift:"settlement_total_fee,20" db:"settlement_total_fee" json:"settlement_total_fee"`
  CouponFee int64 `thrift:"coupon_fee,21" db:"coupon_fee" json:"coupon_fee"`
  CouponCount int64 `thrift:"coupon_count,22" db:"coupon_count" json:"coupon_count"`
  CouponIDN string `thrift:"coupon_id_n,23" db:"coupon_id_n" json:"coupon_id_n"`
  CouponTypeN string `thrift:"coupon_type_n,24" db:"coupon_type_n" json:"coupon_type_n"`
  CouponFeeN int64 `thrift:"coupon_fee_n,25" db:"coupon_fee_n" json:"coupon_fee_n"`
  TransactionID string `thrift:"transaction_id,26" db:"transaction_id" json:"transaction_id"`
  OutTradeNo string `thrift:"out_trade_no,27" db:"out_trade_no" json:"out_trade_no"`
  Attach string `thrift:"attach,28" db:"attach" json:"attach"`
  TimeEnd string `thrift:"time_end,29" db:"time_end" json:"time_end"`
  TradeStateDesc string `thrift:"trade_state_desc,30" db:"trade_state_desc" json:"trade_state_desc"`
}

func NewOrderQueryResp() *OrderQueryResp {
  return &OrderQueryResp{}
}


func (p *OrderQueryResp) GetReturnCode() string {
  return p.ReturnCode
}

func (p *OrderQueryResp) GetReturnMsg() string {
  return p.ReturnMsg
}

func (p *OrderQueryResp) GetAppid() string {
  return p.Appid
}

func (p *OrderQueryResp) GetMchID() string {
  return p.MchID
}

func (p *OrderQueryResp) GetNonceStr() string {
  return p.NonceStr
}

func (p *OrderQueryResp) GetSign() string {
  return p.Sign
}

func (p *OrderQueryResp) GetResultCode() string {
  return p.ResultCode
}

func (p *OrderQueryResp) GetErrCode() string {
  return p.ErrCode
}

func (p *OrderQueryResp) GetErrCodeDes() string {
  return p.ErrCodeDes
}

func (p *OrderQueryResp) GetDeviceInfo() string {
  return p.DeviceInfo
}

func (p *OrderQueryResp) GetOpenid() string {
  return p.Openid
}

func (p *OrderQueryResp) GetIsSubscribe() string {
  return p.IsSubscribe
}

func (p *OrderQueryResp) GetTradeType() string {
  return p.TradeType
}

func (p *OrderQueryResp) GetTradeState() string {
  return p.TradeState
}

func (p *OrderQueryResp) GetBankType() string {
  return p.BankType
}

func (p *OrderQueryResp) GetTotalFee() int64 {
  return p.TotalFee
}

func (p *OrderQueryResp) GetFeeType() string {
  return p.FeeType
}

func (p *OrderQueryResp) GetCashFee() int64 {
  return p.CashFee
}

func (p *OrderQueryResp) GetCashFeeType() string {
  return p.CashFeeType
}

func (p *OrderQueryResp) GetSettlementTotalFee() int64 {
  return p.SettlementTotalFee
}

func (p *OrderQueryResp) GetCouponFee() int64 {
  return p.CouponFee
}

func (p *OrderQueryResp) GetCouponCount() int64 {
  return p.CouponCount
}

func (p *OrderQueryResp) GetCouponIDN() string {
  return p.CouponIDN
}

func (p *OrderQueryResp) GetCouponTypeN() string {
  return p.CouponTypeN
}

func (p *OrderQueryResp) GetCouponFeeN() int64 {
  return p.CouponFeeN
}

func (p *OrderQueryResp) GetTransactionID() string {
  return p.TransactionID
}

func (p *OrderQueryResp) GetOutTradeNo() string {
  return p.OutTradeNo
}

func (p *OrderQueryResp) GetAttach() string {
  return p.Attach
}

func (p *OrderQueryResp) GetTimeEnd() string {
  return p.TimeEnd
}

func (p *OrderQueryResp) GetTradeStateDesc() string {
  return p.TradeStateDesc
}
func (p *OrderQueryResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 24:
      if err := p.ReadField24(iprot); err != nil {
        return err
      }
    case 25:
      if err := p.ReadField25(iprot); err != nil {
        return err
      }
    case 26:
      if err := p.ReadField26(iprot); err != nil {
        return err
      }
    case 27:
      if err := p.ReadField27(iprot); err != nil {
        return err
      }
    case 28:
      if err := p.ReadField28(iprot); err != nil {
        return err
      }
    case 29:
      if err := p.ReadField29(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderQueryResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnCode = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReturnMsg = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ResultCode = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ErrCodeDes = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DeviceInfo = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Openid = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsSubscribe = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.TradeType = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TradeState = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.BankType = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TotalFee = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.FeeType = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CashFee = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.CashFeeType = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.SettlementTotalFee = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.CouponFee = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.CouponCount = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.CouponIDN = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.CouponTypeN = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.CouponFeeN = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.TransactionID = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.OutTradeNo = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.Attach = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.TimeEnd = v
}
  return nil
}

func (p *OrderQueryResp)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.TradeStateDesc = v
}
  return nil
}

func (p *OrderQueryResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderQueryResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:return_code: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:return_code: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:return_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:return_msg: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mch_id: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce_str: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result_code", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:result_code: ", p), err) }
  if err := oprot.WriteString(string(p.ResultCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result_code (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:result_code: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:err_code: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:err_code: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code_des", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:err_code_des: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCodeDes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code_des (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:err_code_des: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_info", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:device_info: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_info (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:device_info: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("openid", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:openid: ", p), err) }
  if err := oprot.WriteString(string(p.Openid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.openid (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:openid: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_subscribe", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:is_subscribe: ", p), err) }
  if err := oprot.WriteString(string(p.IsSubscribe)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_subscribe (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:is_subscribe: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_type", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:trade_type: ", p), err) }
  if err := oprot.WriteString(string(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_type (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:trade_type: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_state", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:trade_state: ", p), err) }
  if err := oprot.WriteString(string(p.TradeState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_state (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:trade_state: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bank_type", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:bank_type: ", p), err) }
  if err := oprot.WriteString(string(p.BankType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bank_type (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:bank_type: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_fee", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:total_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_fee (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:total_fee: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee_type", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:fee_type: ", p), err) }
  if err := oprot.WriteString(string(p.FeeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee_type (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:fee_type: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cash_fee", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:cash_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.CashFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cash_fee (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:cash_fee: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cash_fee_type", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:cash_fee_type: ", p), err) }
  if err := oprot.WriteString(string(p.CashFeeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cash_fee_type (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:cash_fee_type: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settlement_total_fee", thrift.I64, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:settlement_total_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.SettlementTotalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settlement_total_fee (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:settlement_total_fee: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon_fee", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:coupon_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.CouponFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon_fee (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:coupon_fee: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon_count", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:coupon_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.CouponCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon_count (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:coupon_count: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon_id_n", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:coupon_id_n: ", p), err) }
  if err := oprot.WriteString(string(p.CouponIDN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon_id_n (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:coupon_id_n: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon_type_n", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:coupon_type_n: ", p), err) }
  if err := oprot.WriteString(string(p.CouponTypeN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon_type_n (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:coupon_type_n: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon_fee_n", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:coupon_fee_n: ", p), err) }
  if err := oprot.WriteI64(int64(p.CouponFeeN)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon_fee_n (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:coupon_fee_n: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transaction_id", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:transaction_id: ", p), err) }
  if err := oprot.WriteString(string(p.TransactionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transaction_id (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:transaction_id: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("out_trade_no", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:out_trade_no: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.out_trade_no (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:out_trade_no: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attach", thrift.STRING, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:attach: ", p), err) }
  if err := oprot.WriteString(string(p.Attach)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attach (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:attach: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time_end", thrift.STRING, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:time_end: ", p), err) }
  if err := oprot.WriteString(string(p.TimeEnd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_end (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:time_end: ", p), err) }
  return err
}

func (p *OrderQueryResp) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_state_desc", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:trade_state_desc: ", p), err) }
  if err := oprot.WriteString(string(p.TradeStateDesc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_state_desc (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:trade_state_desc: ", p), err) }
  return err
}

func (p *OrderQueryResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderQueryResp(%+v)", *p)
}

// 关闭订单接口返回参数
// 
// 
// Attributes:
//  - ReturnCode: 字段名:返回状态码
// 描述:SUCCESS/FAIL
// 示例:SUCCESS
// 必须:是
//  - ReturnMsg: 字段名:返回信息
// 描述:返回信息，如非空，为错误原因
//     签名失败
//     参数格式校验错误
// 示例:签名失败
// 必须:否
//  - Appid: 字段名:应用ID
// 描述:微信开放平台审核通过的应用APPID
// 示例:wx8888888888888888
// 必须:是
//  - MchID: 字段名:商户号
// 描述:微信支付分配的商户号
// 示例:1900000109
// 必须:是
//  - NonceStr: 字段名:随机字符串
// 描述:随机字符串，不长于32位
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
//  - Sign: 字段名:签名
// 描述:签名，验证签名算
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
//  - ErrCode: 字段名:错误代码
// 描述:详细参见微信错误列表
// 示例:SYSTEMERROR
// 必须:否
//  - ErrCodeDes: 字段名:错误代码描述
// 描述:结果信息描述
// 示例:系统错误
// 必须:否
type CloseOrderResp struct {
  ReturnCode string `thrift:"return_code,1" db:"return_code" json:"return_code"`
  ReturnMsg string `thrift:"return_msg,2" db:"return_msg" json:"return_msg"`
  Appid string `thrift:"appid,3" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,4" db:"mch_id" json:"mch_id"`
  NonceStr string `thrift:"nonce_str,5" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
  ErrCode string `thrift:"err_code,7" db:"err_code" json:"err_code"`
  // unused fields # 8 to 29
  ErrCodeDes string `thrift:"err_code_des,30" db:"err_code_des" json:"err_code_des"`
}

func NewCloseOrderResp() *CloseOrderResp {
  return &CloseOrderResp{}
}


func (p *CloseOrderResp) GetReturnCode() string {
  return p.ReturnCode
}

func (p *CloseOrderResp) GetReturnMsg() string {
  return p.ReturnMsg
}

func (p *CloseOrderResp) GetAppid() string {
  return p.Appid
}

func (p *CloseOrderResp) GetMchID() string {
  return p.MchID
}

func (p *CloseOrderResp) GetNonceStr() string {
  return p.NonceStr
}

func (p *CloseOrderResp) GetSign() string {
  return p.Sign
}

func (p *CloseOrderResp) GetErrCode() string {
  return p.ErrCode
}

func (p *CloseOrderResp) GetErrCodeDes() string {
  return p.ErrCodeDes
}
func (p *CloseOrderResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CloseOrderResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnCode = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReturnMsg = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *CloseOrderResp)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ErrCodeDes = v
}
  return nil
}

func (p *CloseOrderResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseOrderResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CloseOrderResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:return_code: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:return_code: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("return_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:return_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ReturnMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:return_msg: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mch_id: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce_str: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:err_code: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:err_code: ", p), err) }
  return err
}

func (p *CloseOrderResp) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("err_code_des", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:err_code_des: ", p), err) }
  if err := oprot.WriteString(string(p.ErrCodeDes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err_code_des (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:err_code_des: ", p), err) }
  return err
}

func (p *CloseOrderResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CloseOrderResp(%+v)", *p)
}

