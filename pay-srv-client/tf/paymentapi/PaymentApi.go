// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package paymentapi

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"pay-srv-client/tf/req"
	"pay-srv-client/tf/resp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = req.GoUnusedProtection__
var _ = resp.GoUnusedProtection__
type PaymentSrv interface {
  // 商户系统先调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易回话标识后再在APP里面调起支付。
  // 
  // 
  // Parameters:
  //  - Req
  GetPayInfo(req *req.GetPayInfoReq) (r *resp.GetPayInfoResp, err error)
  // 提供所有微信支付订单的查询，商户可以通过该接口主动查询订单状态，完成下一步的业务逻辑
  // 
  // 
  // Parameters:
  //  - Req
  OrderQuery(req *req.OrderQueryReq) (r *resp.OrderQueryResp, err error)
  // 关单接口：商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付；系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口。
  // 注意：订单生成后不能马上调用关单接口，最短调用时间间隔为5分钟。
  // 
  // Parameters:
  //  - Req
  CloseOrder(req *req.CloseOrderReq) (r *resp.CloseOrderResp, err error)
}

type PaymentSrvClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPaymentSrvClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PaymentSrvClient {
  return &PaymentSrvClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPaymentSrvClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PaymentSrvClient {
  return &PaymentSrvClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// 商户系统先调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易回话标识后再在APP里面调起支付。
// 
// 
// Parameters:
//  - Req
func (p *PaymentSrvClient) GetPayInfo(req *req.GetPayInfoReq) (r *resp.GetPayInfoResp, err error) {
  if err = p.sendGetPayInfo(req); err != nil { return }
  return p.recvGetPayInfo()
}

func (p *PaymentSrvClient) sendGetPayInfo(req *req.GetPayInfoReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetPayInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PaymentSrvGetPayInfoArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PaymentSrvClient) recvGetPayInfo() (value *resp.GetPayInfoResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetPayInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetPayInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetPayInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetPayInfo failed: invalid message type")
    return
  }
  result := PaymentSrvGetPayInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// 提供所有微信支付订单的查询，商户可以通过该接口主动查询订单状态，完成下一步的业务逻辑
// 
// 
// Parameters:
//  - Req
func (p *PaymentSrvClient) OrderQuery(req *req.OrderQueryReq) (r *resp.OrderQueryResp, err error) {
  if err = p.sendOrderQuery(req); err != nil { return }
  return p.recvOrderQuery()
}

func (p *PaymentSrvClient) sendOrderQuery(req *req.OrderQueryReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("OrderQuery", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PaymentSrvOrderQueryArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PaymentSrvClient) recvOrderQuery() (value *resp.OrderQueryResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "OrderQuery" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "OrderQuery failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "OrderQuery failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "OrderQuery failed: invalid message type")
    return
  }
  result := PaymentSrvOrderQueryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// 关单接口：商户订单支付失败需要生成新单号重新发起支付，要对原订单号调用关单，避免重复支付；系统下单后，用户支付超时，系统退出不再受理，避免用户继续，请调用关单接口。
// 注意：订单生成后不能马上调用关单接口，最短调用时间间隔为5分钟。
// 
// Parameters:
//  - Req
func (p *PaymentSrvClient) CloseOrder(req *req.CloseOrderReq) (r *resp.CloseOrderResp, err error) {
  if err = p.sendCloseOrder(req); err != nil { return }
  return p.recvCloseOrder()
}

func (p *PaymentSrvClient) sendCloseOrder(req *req.CloseOrderReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("CloseOrder", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PaymentSrvCloseOrderArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PaymentSrvClient) recvCloseOrder() (value *resp.CloseOrderResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "CloseOrder" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CloseOrder failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CloseOrder failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CloseOrder failed: invalid message type")
    return
  }
  result := PaymentSrvCloseOrderResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type PaymentSrvProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PaymentSrv
}

func (p *PaymentSrvProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PaymentSrvProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PaymentSrvProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPaymentSrvProcessor(handler PaymentSrv) *PaymentSrvProcessor {

  self6 := &PaymentSrvProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["GetPayInfo"] = &paymentSrvProcessorGetPayInfo{handler:handler}
  self6.processorMap["OrderQuery"] = &paymentSrvProcessorOrderQuery{handler:handler}
  self6.processorMap["CloseOrder"] = &paymentSrvProcessorCloseOrder{handler:handler}
return self6
}

func (p *PaymentSrvProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type paymentSrvProcessorGetPayInfo struct {
  handler PaymentSrv
}

func (p *paymentSrvProcessorGetPayInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentSrvGetPayInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetPayInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentSrvGetPayInfoResult{}
var retval *resp.GetPayInfoResp
  var err2 error
  if retval, err2 = p.handler.GetPayInfo(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPayInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetPayInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetPayInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentSrvProcessorOrderQuery struct {
  handler PaymentSrv
}

func (p *paymentSrvProcessorOrderQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentSrvOrderQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("OrderQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentSrvOrderQueryResult{}
var retval *resp.OrderQueryResp
  var err2 error
  if retval, err2 = p.handler.OrderQuery(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OrderQuery: " + err2.Error())
    oprot.WriteMessageBegin("OrderQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("OrderQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type paymentSrvProcessorCloseOrder struct {
  handler PaymentSrv
}

func (p *paymentSrvProcessorCloseOrder) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PaymentSrvCloseOrderArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CloseOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PaymentSrvCloseOrderResult{}
var retval *resp.CloseOrderResp
  var err2 error
  if retval, err2 = p.handler.CloseOrder(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CloseOrder: " + err2.Error())
    oprot.WriteMessageBegin("CloseOrder", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CloseOrder", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type PaymentSrvGetPayInfoArgs struct {
  Req *req.GetPayInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewPaymentSrvGetPayInfoArgs() *PaymentSrvGetPayInfoArgs {
  return &PaymentSrvGetPayInfoArgs{}
}

var PaymentSrvGetPayInfoArgs_Req_DEFAULT *req.GetPayInfoReq
func (p *PaymentSrvGetPayInfoArgs) GetReq() *req.GetPayInfoReq {
  if !p.IsSetReq() {
    return PaymentSrvGetPayInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *PaymentSrvGetPayInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *PaymentSrvGetPayInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvGetPayInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &req.GetPayInfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *PaymentSrvGetPayInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPayInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvGetPayInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *PaymentSrvGetPayInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvGetPayInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentSrvGetPayInfoResult struct {
  Success *resp.GetPayInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentSrvGetPayInfoResult() *PaymentSrvGetPayInfoResult {
  return &PaymentSrvGetPayInfoResult{}
}

var PaymentSrvGetPayInfoResult_Success_DEFAULT *resp.GetPayInfoResp
func (p *PaymentSrvGetPayInfoResult) GetSuccess() *resp.GetPayInfoResp {
  if !p.IsSetSuccess() {
    return PaymentSrvGetPayInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentSrvGetPayInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentSrvGetPayInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvGetPayInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &resp.GetPayInfoResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentSrvGetPayInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPayInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvGetPayInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentSrvGetPayInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvGetPayInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type PaymentSrvOrderQueryArgs struct {
  Req *req.OrderQueryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewPaymentSrvOrderQueryArgs() *PaymentSrvOrderQueryArgs {
  return &PaymentSrvOrderQueryArgs{}
}

var PaymentSrvOrderQueryArgs_Req_DEFAULT *req.OrderQueryReq
func (p *PaymentSrvOrderQueryArgs) GetReq() *req.OrderQueryReq {
  if !p.IsSetReq() {
    return PaymentSrvOrderQueryArgs_Req_DEFAULT
  }
return p.Req
}
func (p *PaymentSrvOrderQueryArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *PaymentSrvOrderQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvOrderQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &req.OrderQueryReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *PaymentSrvOrderQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvOrderQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *PaymentSrvOrderQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvOrderQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentSrvOrderQueryResult struct {
  Success *resp.OrderQueryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentSrvOrderQueryResult() *PaymentSrvOrderQueryResult {
  return &PaymentSrvOrderQueryResult{}
}

var PaymentSrvOrderQueryResult_Success_DEFAULT *resp.OrderQueryResp
func (p *PaymentSrvOrderQueryResult) GetSuccess() *resp.OrderQueryResp {
  if !p.IsSetSuccess() {
    return PaymentSrvOrderQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentSrvOrderQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentSrvOrderQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvOrderQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &resp.OrderQueryResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentSrvOrderQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvOrderQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentSrvOrderQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvOrderQueryResult(%+v)", *p)
}

// Attributes:
//  - Req
type PaymentSrvCloseOrderArgs struct {
  Req *req.CloseOrderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewPaymentSrvCloseOrderArgs() *PaymentSrvCloseOrderArgs {
  return &PaymentSrvCloseOrderArgs{}
}

var PaymentSrvCloseOrderArgs_Req_DEFAULT *req.CloseOrderReq
func (p *PaymentSrvCloseOrderArgs) GetReq() *req.CloseOrderReq {
  if !p.IsSetReq() {
    return PaymentSrvCloseOrderArgs_Req_DEFAULT
  }
return p.Req
}
func (p *PaymentSrvCloseOrderArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *PaymentSrvCloseOrderArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvCloseOrderArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &req.CloseOrderReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *PaymentSrvCloseOrderArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseOrder_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvCloseOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *PaymentSrvCloseOrderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvCloseOrderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PaymentSrvCloseOrderResult struct {
  Success *resp.CloseOrderResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPaymentSrvCloseOrderResult() *PaymentSrvCloseOrderResult {
  return &PaymentSrvCloseOrderResult{}
}

var PaymentSrvCloseOrderResult_Success_DEFAULT *resp.CloseOrderResp
func (p *PaymentSrvCloseOrderResult) GetSuccess() *resp.CloseOrderResp {
  if !p.IsSetSuccess() {
    return PaymentSrvCloseOrderResult_Success_DEFAULT
  }
return p.Success
}
func (p *PaymentSrvCloseOrderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PaymentSrvCloseOrderResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PaymentSrvCloseOrderResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &resp.CloseOrderResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PaymentSrvCloseOrderResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseOrder_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PaymentSrvCloseOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PaymentSrvCloseOrderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PaymentSrvCloseOrderResult(%+v)", *p)
}


