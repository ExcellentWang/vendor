// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package req

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"pay-srv-client/tf/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
// 完全下单接口入参
// 
// 
// Attributes:
//  - Header
//  - Appid: 字段名:应用ID
// 描述:微信开放平台审核通过的应用APPID
// 示例:wxd678efh567hg6787
// 必须:是
//  - MchID: 字段名:商户号
// 描述:微信支付分配的商户号
// 示例:1230000109
// 必须:是
//  - DeviceInfo: 字段名:设备号
// 描述:终端设备号(门店号或收银设备ID)，默认请传"WEB"
// 示例:013467007045764
// 必须:否
//  - NonceStr: 字段名:随机字符串
// 描述:随机字符串，不长于32位。推荐随机数生成算法
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
//  - Sign: 字段名:签名
// 描述:签名，详见签名生成算法
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
//  - SignType: 字段名:签名类型
// 描述:签名类型，目前支持HMAC-SHA256和MD5，默认为MD5
// 示例:HMAC-SHA256
// 必须:否
//  - Body: 字段名:商品描述
// 描述:APP——需传入应用市场上的APP名字-实际商品名称，天天爱消除-游戏充值。
// 示例:腾讯充值中心-QQ会员充值
// 必须:是
//  - Detail: 字段名:商品详情
// 描述:商品详细描述，对于使用单品优惠的商户，改字段必须按照规范上传，详见“单品优惠参数说明”
// 示例:
// 必须:否
//  - Attach: 字段名:附加数据
// 描述:附加数据，在查询API和支付通知中原样返回，该字段主要用于商户携带订单的自定义数据
// 示例:深圳分店
// 必须:否
//  - OutTradeNo: 字段名:商户订单号
// 描述:商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一。详见商户订单号
// 示例:20150806125346
// 必须:是
//  - FeeType: 字段名:货币类型
// 描述:符合ISO 4217标准的三位字母代码，默认人民币：CNY，其他值列表详见货币类型
// 示例:CNY
// 必须:否
//  - TotalFee: 字段名:总金额
// 描述:订单总金额，单位为分，详见支付金额
// 示例:888
// 必须:是
//  - SpbillCreateIP: 字段名:终端IP
// 描述:用户端实际ip
// 示例:123.12.12.123
// 必须:是
//  - TimeStart: 字段名:交易起始时间
// 描述:订单生成时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见时间规则
// 示例:20091225091010
// 必须:否
//  - TimeExpire: 字段名:交易结束时间
// 描述:订单失效时间，格式为yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。其他详见时间规则
// 注意：最短失效时间间隔必须大于5分钟
// 示例:20091227091010
// 必须:否
//  - GoodsTag: 字段名:订单优惠标记
// 描述:订单优惠标记，代金券或立减优惠功能的参数，说明详见代金券或立减优惠
// 示例:WXG
// 必须:否
//  - NotifyURL: 字段名:通知地址
// 描述:接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数。
// 示例:http://www.weixin.qq.com/wxpay/pay.php
// 必须:是
//  - TradeType: 字段名:交易类型
// 描述:支付类型
// 示例:APP
// 必须:是
//  - LimitPay: 字段名:指定支付方式
// 描述:no_credit--指定不能使用信用卡支付
// 示例:no_credit
// 必须:否
//  - UserId: 转入账户ID
// 
type GetPayInfoReq struct {
  Header *base.ReqHeader `thrift:"header,1" db:"header" json:"header"`
  Appid string `thrift:"appid,2" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,3" db:"mch_id" json:"mch_id"`
  DeviceInfo string `thrift:"device_info,4" db:"device_info" json:"device_info"`
  NonceStr string `thrift:"nonce_str,5" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
  SignType string `thrift:"sign_type,7" db:"sign_type" json:"sign_type"`
  Body string `thrift:"body,8" db:"body" json:"body"`
  Detail string `thrift:"detail,9" db:"detail" json:"detail"`
  Attach string `thrift:"attach,10" db:"attach" json:"attach"`
  OutTradeNo string `thrift:"out_trade_no,11" db:"out_trade_no" json:"out_trade_no"`
  FeeType string `thrift:"fee_type,12" db:"fee_type" json:"fee_type"`
  TotalFee int64 `thrift:"total_fee,13" db:"total_fee" json:"total_fee"`
  SpbillCreateIP string `thrift:"spbill_create_ip,14" db:"spbill_create_ip" json:"spbill_create_ip"`
  TimeStart string `thrift:"time_start,15" db:"time_start" json:"time_start"`
  TimeExpire string `thrift:"time_expire,16" db:"time_expire" json:"time_expire"`
  GoodsTag string `thrift:"goods_tag,17" db:"goods_tag" json:"goods_tag"`
  NotifyURL string `thrift:"notify_url,18" db:"notify_url" json:"notify_url"`
  TradeType string `thrift:"trade_type,19" db:"trade_type" json:"trade_type"`
  LimitPay string `thrift:"limit_pay,20" db:"limit_pay" json:"limit_pay"`
  UserId int64 `thrift:"userId,21" db:"userId" json:"userId"`
}

func NewGetPayInfoReq() *GetPayInfoReq {
  return &GetPayInfoReq{}
}

var GetPayInfoReq_Header_DEFAULT *base.ReqHeader
func (p *GetPayInfoReq) GetHeader() *base.ReqHeader {
  if !p.IsSetHeader() {
    return GetPayInfoReq_Header_DEFAULT
  }
return p.Header
}

func (p *GetPayInfoReq) GetAppid() string {
  return p.Appid
}

func (p *GetPayInfoReq) GetMchID() string {
  return p.MchID
}

func (p *GetPayInfoReq) GetDeviceInfo() string {
  return p.DeviceInfo
}

func (p *GetPayInfoReq) GetNonceStr() string {
  return p.NonceStr
}

func (p *GetPayInfoReq) GetSign() string {
  return p.Sign
}

func (p *GetPayInfoReq) GetSignType() string {
  return p.SignType
}

func (p *GetPayInfoReq) GetBody() string {
  return p.Body
}

func (p *GetPayInfoReq) GetDetail() string {
  return p.Detail
}

func (p *GetPayInfoReq) GetAttach() string {
  return p.Attach
}

func (p *GetPayInfoReq) GetOutTradeNo() string {
  return p.OutTradeNo
}

func (p *GetPayInfoReq) GetFeeType() string {
  return p.FeeType
}

func (p *GetPayInfoReq) GetTotalFee() int64 {
  return p.TotalFee
}

func (p *GetPayInfoReq) GetSpbillCreateIP() string {
  return p.SpbillCreateIP
}

func (p *GetPayInfoReq) GetTimeStart() string {
  return p.TimeStart
}

func (p *GetPayInfoReq) GetTimeExpire() string {
  return p.TimeExpire
}

func (p *GetPayInfoReq) GetGoodsTag() string {
  return p.GoodsTag
}

func (p *GetPayInfoReq) GetNotifyURL() string {
  return p.NotifyURL
}

func (p *GetPayInfoReq) GetTradeType() string {
  return p.TradeType
}

func (p *GetPayInfoReq) GetLimitPay() string {
  return p.LimitPay
}

func (p *GetPayInfoReq) GetUserId() int64 {
  return p.UserId
}
func (p *GetPayInfoReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetPayInfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPayInfoReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &base.ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetPayInfoReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeviceInfo = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SignType = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Detail = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Attach = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OutTradeNo = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.FeeType = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.TotalFee = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.SpbillCreateIP = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.TimeStart = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.TimeExpire = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.GoodsTag = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotifyURL = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.TradeType = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.LimitPay = v
}
  return nil
}

func (p *GetPayInfoReq)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *GetPayInfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetPayInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPayInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mch_id: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("device_info", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device_info: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device_info (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device_info: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce_str: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign_type", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sign_type: ", p), err) }
  if err := oprot.WriteString(string(p.SignType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sign_type: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:body: ", p), err) }
  if err := oprot.WriteString(string(p.Body)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:body: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("detail", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:detail: ", p), err) }
  if err := oprot.WriteString(string(p.Detail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.detail (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:detail: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attach", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:attach: ", p), err) }
  if err := oprot.WriteString(string(p.Attach)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attach (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:attach: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("out_trade_no", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:out_trade_no: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.out_trade_no (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:out_trade_no: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee_type", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fee_type: ", p), err) }
  if err := oprot.WriteString(string(p.FeeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee_type (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fee_type: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total_fee", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:total_fee: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_fee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:total_fee: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spbill_create_ip", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:spbill_create_ip: ", p), err) }
  if err := oprot.WriteString(string(p.SpbillCreateIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spbill_create_ip (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:spbill_create_ip: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time_start", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:time_start: ", p), err) }
  if err := oprot.WriteString(string(p.TimeStart)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_start (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:time_start: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time_expire", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:time_expire: ", p), err) }
  if err := oprot.WriteString(string(p.TimeExpire)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_expire (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:time_expire: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("goods_tag", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:goods_tag: ", p), err) }
  if err := oprot.WriteString(string(p.GoodsTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.goods_tag (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:goods_tag: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notify_url", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notify_url: ", p), err) }
  if err := oprot.WriteString(string(p.NotifyURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notify_url (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notify_url: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_type", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:trade_type: ", p), err) }
  if err := oprot.WriteString(string(p.TradeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_type (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:trade_type: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit_pay", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:limit_pay: ", p), err) }
  if err := oprot.WriteString(string(p.LimitPay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_pay (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:limit_pay: ", p), err) }
  return err
}

func (p *GetPayInfoReq) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:userId: ", p), err) }
  return err
}

func (p *GetPayInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPayInfoReq(%+v)", *p)
}

// 查询订单接口请求参
// 
// Attributes:
//  - Header
//  - Appid: 字段名:应用APPID
// 描述:微信开放平台审核通过的应用APPID
// 示例:wxd678efh567hg6787
// 必须:是
//  - MchID: 字段名:商户号
// 描述:微信支付分配的商户号
// 示例:1230000109
// 必须:是
//  - TransactionID: 字段名:微信订单号
// 描述:微信的订单号，优先使用
// 示例:1009660380201506130728806387
// 必须:二选一
//  - OutTradeNo: 字段名:商户订单号
// 描述:商户系统内部的订单号，当没提供transaction_id时需要传这个
// 示例:20150806125346
// 必须: 与微信订单号二选一
//  - NonceStr: 字段名:随机字符串
// 描述:随机字符串，不长于32位。推荐随机数生成算法
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
//  - Sign: 字段名:签名
// 描述:签名，详见签名生成算法
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
type OrderQueryReq struct {
  Header *base.ReqHeader `thrift:"header,1" db:"header" json:"header"`
  Appid string `thrift:"appid,2" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,3" db:"mch_id" json:"mch_id"`
  TransactionID string `thrift:"transaction_id,4" db:"transaction_id" json:"transaction_id"`
  OutTradeNo string `thrift:"out_trade_no,5" db:"out_trade_no" json:"out_trade_no"`
  NonceStr string `thrift:"nonce_str,6" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,7" db:"sign" json:"sign"`
}

func NewOrderQueryReq() *OrderQueryReq {
  return &OrderQueryReq{}
}

var OrderQueryReq_Header_DEFAULT *base.ReqHeader
func (p *OrderQueryReq) GetHeader() *base.ReqHeader {
  if !p.IsSetHeader() {
    return OrderQueryReq_Header_DEFAULT
  }
return p.Header
}

func (p *OrderQueryReq) GetAppid() string {
  return p.Appid
}

func (p *OrderQueryReq) GetMchID() string {
  return p.MchID
}

func (p *OrderQueryReq) GetTransactionID() string {
  return p.TransactionID
}

func (p *OrderQueryReq) GetOutTradeNo() string {
  return p.OutTradeNo
}

func (p *OrderQueryReq) GetNonceStr() string {
  return p.NonceStr
}

func (p *OrderQueryReq) GetSign() string {
  return p.Sign
}
func (p *OrderQueryReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *OrderQueryReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderQueryReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &base.ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *OrderQueryReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *OrderQueryReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *OrderQueryReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransactionID = v
}
  return nil
}

func (p *OrderQueryReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OutTradeNo = v
}
  return nil
}

func (p *OrderQueryReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *OrderQueryReq)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *OrderQueryReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OrderQueryReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mch_id: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transaction_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transaction_id: ", p), err) }
  if err := oprot.WriteString(string(p.TransactionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transaction_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transaction_id: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("out_trade_no", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:out_trade_no: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.out_trade_no (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:out_trade_no: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonce_str: ", p), err) }
  return err
}

func (p *OrderQueryReq) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sign: ", p), err) }
  return err
}

func (p *OrderQueryReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderQueryReq(%+v)", *p)
}

// 关闭订单
// 
// Attributes:
//  - Header
//  - Appid: 字段名:应用ID
// 描述:微信开放平台审核通过的应用APPID
// 示例:wx8888888888888888
// 必须:是
//  - MchID: 字段名:商户号
// 描述:微信支付分配的商户号
// 示例:1900000109
// 必须:是
//  - OutTradeNo: 字段名: 商户订单号
// 描述:商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一
// 示例:1217752501201407033233368018
// 必须:是
//  - NonceStr: 字段名:随机字符串
// 描述:商户系统内部的订单号,32个字符内、可包含字母, 其他说明见安全规范
// 示例:5K8264ILTKCH16CQ2502SI8ZNMTM67VS
// 必须:是
//  - Sign: 字段名:签名
// 描述:签名，详见签名生成算法
// 示例:C380BEC2BFD727A4B6845133519F3AD6
// 必须:是
type CloseOrderReq struct {
  Header *base.ReqHeader `thrift:"header,1" db:"header" json:"header"`
  Appid string `thrift:"appid,2" db:"appid" json:"appid"`
  MchID string `thrift:"mch_id,3" db:"mch_id" json:"mch_id"`
  OutTradeNo string `thrift:"out_trade_no,4" db:"out_trade_no" json:"out_trade_no"`
  NonceStr string `thrift:"nonce_str,5" db:"nonce_str" json:"nonce_str"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
}

func NewCloseOrderReq() *CloseOrderReq {
  return &CloseOrderReq{}
}

var CloseOrderReq_Header_DEFAULT *base.ReqHeader
func (p *CloseOrderReq) GetHeader() *base.ReqHeader {
  if !p.IsSetHeader() {
    return CloseOrderReq_Header_DEFAULT
  }
return p.Header
}

func (p *CloseOrderReq) GetAppid() string {
  return p.Appid
}

func (p *CloseOrderReq) GetMchID() string {
  return p.MchID
}

func (p *CloseOrderReq) GetOutTradeNo() string {
  return p.OutTradeNo
}

func (p *CloseOrderReq) GetNonceStr() string {
  return p.NonceStr
}

func (p *CloseOrderReq) GetSign() string {
  return p.Sign
}
func (p *CloseOrderReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *CloseOrderReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CloseOrderReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &base.ReqHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *CloseOrderReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *CloseOrderReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MchID = v
}
  return nil
}

func (p *CloseOrderReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutTradeNo = v
}
  return nil
}

func (p *CloseOrderReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NonceStr = v
}
  return nil
}

func (p *CloseOrderReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *CloseOrderReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseOrderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CloseOrderReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *CloseOrderReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteString(string(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *CloseOrderReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mch_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mch_id: ", p), err) }
  if err := oprot.WriteString(string(p.MchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mch_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mch_id: ", p), err) }
  return err
}

func (p *CloseOrderReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("out_trade_no", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:out_trade_no: ", p), err) }
  if err := oprot.WriteString(string(p.OutTradeNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.out_trade_no (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:out_trade_no: ", p), err) }
  return err
}

func (p *CloseOrderReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce_str", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce_str: ", p), err) }
  if err := oprot.WriteString(string(p.NonceStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce_str (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce_str: ", p), err) }
  return err
}

func (p *CloseOrderReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *CloseOrderReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CloseOrderReq(%+v)", *p)
}

