// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// 请求头信息
// 
// Attributes:
//  - AppType: App类型（1安卓，2ios，3H5，4网站）
//  - AppVersion: App版本号
//  - Token: Token
//  - Timestamp: 当前时间戳(毫秒数)
//  - Nonce: 长度大于10位的随机字符串不能重复,推荐使用UUID
//  - Signature: 签名信息
//  - UserId: 用户id
//  - AppKind: APP种类(1:非凡医生端 2:非凡患者端)
//  - AppMark: app标识
//  - DeviceId: 设备Id
//  - DeviceName: 设备名称
//  - OsName: 系统名称
type ReqHeader struct {
  AppType int32 `thrift:"appType,1" db:"appType" json:"appType"`
  AppVersion string `thrift:"appVersion,2" db:"appVersion" json:"appVersion"`
  Token string `thrift:"token,3" db:"token" json:"token"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Nonce string `thrift:"nonce,5" db:"nonce" json:"nonce"`
  Signature string `thrift:"signature,6" db:"signature" json:"signature"`
  UserId int64 `thrift:"userId,7" db:"userId" json:"userId"`
  AppKind int32 `thrift:"appKind,8" db:"appKind" json:"appKind"`
  AppMark string `thrift:"appMark,9" db:"appMark" json:"appMark"`
  DeviceId string `thrift:"deviceId,10" db:"deviceId" json:"deviceId"`
  DeviceName string `thrift:"deviceName,11" db:"deviceName" json:"deviceName"`
  OsName string `thrift:"osName,12" db:"osName" json:"osName"`
}

func NewReqHeader() *ReqHeader {
  return &ReqHeader{}
}


func (p *ReqHeader) GetAppType() int32 {
  return p.AppType
}

func (p *ReqHeader) GetAppVersion() string {
  return p.AppVersion
}

func (p *ReqHeader) GetToken() string {
  return p.Token
}

func (p *ReqHeader) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *ReqHeader) GetNonce() string {
  return p.Nonce
}

func (p *ReqHeader) GetSignature() string {
  return p.Signature
}

func (p *ReqHeader) GetUserId() int64 {
  return p.UserId
}

func (p *ReqHeader) GetAppKind() int32 {
  return p.AppKind
}

func (p *ReqHeader) GetAppMark() string {
  return p.AppMark
}

func (p *ReqHeader) GetDeviceId() string {
  return p.DeviceId
}

func (p *ReqHeader) GetDeviceName() string {
  return p.DeviceName
}

func (p *ReqHeader) GetOsName() string {
  return p.OsName
}
func (p *ReqHeader) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqHeader)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppType = v
}
  return nil
}

func (p *ReqHeader)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppVersion = v
}
  return nil
}

func (p *ReqHeader)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *ReqHeader)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ReqHeader)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *ReqHeader)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *ReqHeader)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ReqHeader)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AppKind = v
}
  return nil
}

func (p *ReqHeader)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AppMark = v
}
  return nil
}

func (p *ReqHeader)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DeviceId = v
}
  return nil
}

func (p *ReqHeader)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *ReqHeader)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.OsName = v
}
  return nil
}

func (p *ReqHeader) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReqHeader"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqHeader) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AppType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appType: ", p), err) }
  return err
}

func (p *ReqHeader) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appVersion", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appVersion: ", p), err) }
  if err := oprot.WriteString(string(p.AppVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appVersion: ", p), err) }
  return err
}

func (p *ReqHeader) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err) }
  return err
}

func (p *ReqHeader) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *ReqHeader) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nonce", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nonce: ", p), err) }
  if err := oprot.WriteString(string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nonce: ", p), err) }
  return err
}

func (p *ReqHeader) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signature", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:signature: ", p), err) }
  return err
}

func (p *ReqHeader) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:userId: ", p), err) }
  return err
}

func (p *ReqHeader) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appKind", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:appKind: ", p), err) }
  if err := oprot.WriteI32(int32(p.AppKind)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKind (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:appKind: ", p), err) }
  return err
}

func (p *ReqHeader) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appMark", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:appMark: ", p), err) }
  if err := oprot.WriteString(string(p.AppMark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appMark (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:appMark: ", p), err) }
  return err
}

func (p *ReqHeader) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:deviceId: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:deviceId: ", p), err) }
  return err
}

func (p *ReqHeader) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:deviceName: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:deviceName: ", p), err) }
  return err
}

func (p *ReqHeader) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("osName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:osName: ", p), err) }
  if err := oprot.WriteString(string(p.OsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:osName: ", p), err) }
  return err
}

func (p *ReqHeader) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqHeader(%+v)", *p)
}

